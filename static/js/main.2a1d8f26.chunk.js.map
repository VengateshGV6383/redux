{"version":3,"sources":["CreateSlice.js","components/InputTasks.jsx","components/TaskMenu.jsx","components/Tasks.jsx","components/App.jsx","store.js","index.js"],"names":["tasklistSlice","createSlice","name","initialState","tasklist","reducers","addTask","state","action","task","payload","isCompleted","date","newtask","id","arr","filter","item","length","taskTObeUpdate","unshift","deleteTask","markAsdone","newTask","window","confirm","push","actions","InputTasks","handleOnClickBtn","btnName","value","useState","setTask","maxWidth","buttonClicked","localStorage","getItem","parseInt","setItem","Date","slice","alert","className","htmlFor","type","onChange","e","target","placeholder","style","marginLeft","onClick","TaskMenu","totaltask","completedTask","notCompleted","margin","ListItems","setCompleted","idx","setActiveIdx","dispatch","useDispatch","addingTodos","setUpdate","update","totalIsCompleted","list","totalTask","Fragment","map","index","setActiveDropdown","maxHeight","overflow","marigin","App","selector","useSelector","keys","Object","position","height","width","padding","configureStore","reducer","tasklistSliceReducer","reactDom","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2a1d8f26.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nexport const tasklistSlice = createSlice({\r\n  name: \"tasklist\",\r\n  initialState: {\r\n    tasklist: [],\r\n  },\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n      const task = action.payload.task;\r\n      const isCompleted = action.payload.isCompleted;\r\n      const date = action.payload.date;\r\n      const id = action.payload.id;\r\n      const newtask = {\r\n        id: id,\r\n        task: task,\r\n        isCompleted: isCompleted,\r\n        date: date,\r\n      };\r\n      //the task to get updated\r\n      const arr = state.tasklist.filter((item) => item.id === newtask.id);\r\n      //only if task id is already present in tasklist\r\n      if (arr.length !== 0) {\r\n        const [taskTObeUpdate] = arr;\r\n        //filtering the taskslist other than taskToBeUpdate\r\n        state.tasklist = state.tasklist.filter(\r\n          (item) => item.id !== taskTObeUpdate.id\r\n        );\r\n        //Updatding the task;\r\n        taskTObeUpdate.task = task;\r\n        state.tasklist.unshift(taskTObeUpdate);\r\n      } else {\r\n        state.tasklist.unshift(newtask);\r\n      }\r\n    },\r\n    deleteTask: (state, action) => {\r\n      //filtering the tasklist leaving the task holding payload id\r\n      state.tasklist = state.tasklist.filter(\r\n        (item) => item.id !== action.payload.id\r\n      );\r\n    },\r\n    markAsdone: (state, action) => {\r\n      //marking the tasks as completed;\r\n      const id = action.payload.id;\r\n      const task = action.payload.task;\r\n      const date = action.payload.date;\r\n      //fetching the task to be marked completed\r\n      const newTask = state.tasklist.filter(\r\n        (item) => item.id === id && item.task === task\r\n      );\r\n      newTask.isCompleted = true;\r\n      newTask.id = id;\r\n      newTask.task = task;\r\n      newTask.date = date;\r\n      // filtering out the tasks without the the fteched task\r\n      state.tasklist = state.tasklist.filter(\r\n        (item) => item.id !== action.payload.id\r\n      );\r\n      //inserting the fetched task with marked completed\r\n\r\n      if (window.confirm(`Hurrah! You have completed ${task} `))\r\n        state.tasklist.push(newTask);\r\n      else {\r\n        newTask.isCompleted = false;\r\n        state.tasklist.unshift(newTask);\r\n      }\r\n    },\r\n  },\r\n});\r\nexport const { addTask, deleteTask, markAsdone } = tasklistSlice.actions;\r\nexport default tasklistSlice.reducer;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst InputTasks=({handleOnClickBtn,btnName,value})=>{\r\n    const initialState = value? value.task:\" \";\r\n    const [task,setTask]=useState(initialState);\r\n    const handleonChange=(e)=>{\r\n        setTask(e.target.value);\r\n    }\r\n    const maxWidth=btnName===\"Update\"?\"50%\":\"100%\";\r\n    const buttonClicked=()=>{\r\n        if(task.length<=100 && task!==\" \"){\r\n            let id=0;\r\n            if(localStorage.getItem(\"userid\")){\r\n                id=parseInt(localStorage.getItem(\"userid\"));\r\n                localStorage.setItem(\"userid\",`${id+1}`)\r\n            }else{\r\n                localStorage.setItem(\"userid\",`${id+1}`)\r\n            }\r\n            if(value){\r\n                handleOnClickBtn({task:task,isCompleted:value.isCompleted,id:value.id,date:value.date})\r\n    \r\n            }\r\n            else{\r\n                let date=`${new Date()}`;\r\n                handleOnClickBtn({task:task,isCompleted:false,date:date.slice(0,24),id:id})\r\n            }\r\n            //let todo=value?{task:value.task,id:value.id,isCompleted:value.isCompleted,date:value.date}:{task:task,id:id,isCompleted:false,date:new Date()}\r\n        \r\n\r\n        }\r\n        else\r\n            window.alert(\"Dont provide any tasks higher than 100 characters\")\r\n        setTask(\" \");\r\n    }\r\n    return (\r\n        <div className=\"ui form\">\r\n            <div className=\"field\">\r\n                <label htmlFor=\"todoinp\">What's your plan today?</label>\r\n                <input type=\"text\" id=\"todoinp\" value={task} onChange={handleonChange} placeholder=\"Maximum of 100 characters\" style={{maxWidth:maxWidth}}/>\r\n                {value?<button className=\"ui positive button\" style={{marginLeft:\"1%\"}} onClick={buttonClicked}>{btnName}</button>:null}\r\n            </div>\r\n            {value?null:<button className={btnName===\"Add\"?\"ui primary button\":\"ui positive button\"} onClick={buttonClicked}>{btnName}</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputTasks;","import React from 'react';\r\nconst TaskMenu = ({totaltask,completedTask,notCompleted}) => {\r\n    return (\r\n        <div style={{margin:\"1%\"}}>\r\n\r\n               \r\n               <div className=\"ui compact menu\">\r\n               \r\n               <span className=\"item\">\r\n                <i className=\"tasks icon\"></i>Tasks\r\n                {totaltask!==0?<span className=\"floating ui teal label\">{`${totaltask}`}</span>:null}\r\n               </span>\r\n        \r\n               <span className=\"item\">\r\n                <i className=\"bookmark icon\"></i>Done\r\n                {completedTask!==0?<span className=\"floating ui green label\">{`${completedTask}`}</span>:null}\r\n               </span>\r\n               <span className=\"item\">\r\n                <i className=\"tags icon\"></i>To Do\r\n                {notCompleted!==0?<span className=\"floating ui red label\">{`${notCompleted}`}</span>:null}\r\n               </span>\r\n           </div>\r\n           \r\n        </div>\r\n            \r\n      );\r\n}\r\n \r\nexport default TaskMenu;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../CreateSlice';\r\nimport InputTasks from './InputTasks';\r\nimport TaskMenu from './TaskMenu';\r\nconst ListItems = ({tasklist,filter,setCompleted}) => {\r\n    const [idx,setActiveIdx]=useState(null);\r\n    const dispatch=useDispatch()\r\n    const addingTodos=(task)=>{\r\n        dispatch(addTask(task))\r\n        setUpdate(null)\r\n       \r\n        }\r\n    const [update,setUpdate]=useState(null);\r\n    const totalIsCompleted=(list)=>{\r\n        let count=list.filter(item=> item.isCompleted===true)\r\n        return count.length;\r\n    }\r\n    const setActiveDropdown=(index)=>{\r\n        setActiveIdx(index);\r\n    }\r\n    const totalTask=(list)=>{\r\n        return list.length;\r\n    }\r\n    \r\n    return (  \r\n    <React.Fragment>   \r\n        <TaskMenu totaltask={totalTask(tasklist)} completedTask={totalIsCompleted(tasklist)} notCompleted={totalTask(tasklist) - totalIsCompleted(tasklist) }/>\r\n        {\r\n            tasklist?.map((item,index)=>{\r\n                let date=`${item.date}`\r\n                return(\r\n            <div onClick={()=>setActiveDropdown(index)} key={item.id} style={{maxHeight:\"150px\",margin:\"1%\",overflow:\"auto\"}} >\r\n            \r\n            <div className={idx===index?\"active title\":\"title\"}>\r\n                    <i className=\"dropdown icon\"></i>\r\n                    <i className=\"info circle icon \"></i>{`Task no : ${item.id}`}&emsp;&emsp;<i className=\"calendar icon\"></i>{date.slice(0,24)}\r\n           </div>\r\n           \r\n               <div className={idx===index?\"active content\":\"content\"}>\r\n                   {\r\n                       update===index?\r\n                       \r\n                        <InputTasks btnName=\"Update\" value={item} handleOnClickBtn={addingTodos}/>\r\n                        :\r\n                        <div  style={{margin:\"1%\"}}>\r\n                            {item.task}\r\n                            {item.isCompleted ?<p className=\"ui green left pointing label\">Done</p>:<p className=\"ui left pointing label\"><h5>Todo</h5></p> }\r\n                        </div>\r\n                   }\r\n                        \r\n                <div>\r\n           \r\n            \r\n            <p>\r\n            {item.isCompleted?null:<button className=\"ui teal button\" style={{margin:\"1%\"}} onClick={()=>setUpdate(index)}><i className=\"pencil alternate icon\"></i>&nbsp;Edit</button>}\r\n            <button className=\"ui orange button\" style={{margin:\"1%\"}} onClick={()=>filter(item.id)}><i className=\"trash white icon\"></i>&nbsp;Delete</button>&emsp;\r\n            {!item.isCompleted?<button className=\"ui button\" style={{marigin:\"1%\"}} onClick={()=>setCompleted({id:item.id,task:item.task,date:item.date})}><i className=\"bookmark white icon\"></i>&nbsp;Completed</button>:null}\r\n            </p>\r\n            </div>\r\n             </div>\r\n         </div>\r\n        \r\n\r\n                )\r\n            })\r\n        } \r\n        \r\n    </React.Fragment>\r\n    \r\n  \r\n    );\r\n}\r\n \r\nexport default ListItems;","import React from 'react';\r\nimport { addTask,deleteTask,markAsdone} from '../CreateSlice';\r\nimport { useSelector,useDispatch } from 'react-redux';  \r\nimport InputTasks from './InputTasks';\r\nimport ListItems from './Tasks';\r\nimport './app.css';\r\n\r\nconst App=()=>{\r\n   \r\n    const selector=useSelector((state)=>state.tasklist)\r\n    const dispatch=useDispatch()\r\n    const addingTodos=(task)=>{\r\n        dispatch(addTask(task))\r\n       \r\n        }\r\n    \r\n    const keys=Object.keys(selector)  \r\n    const removeTask=(id)=>{\r\n    \r\n    dispatch(deleteTask({id:id}))\r\n}\r\n\r\nconst setCompleted=({id,task,date})=>{\r\n    \tdispatch(markAsdone({id:id,task:task,date:date}))    \r\n}\r\n    return(\r\n<div>\r\n    <div className=\"ui segment\" style={{maxHeight:\"200px\",position:\"relative\"}}>\r\n         <InputTasks value={null} handleOnClickBtn={addingTodos} btnName=\"Add\"/>\r\n     </div>\r\n                <div className=\"ui segment\" style={{height:\"400px\",overflow:\"auto\"}}>\r\n                <div className=\"ui styled accordion\" style={{maxHeight:\"max-content\",width:\"100%\",overflow:\"auto\",padding:\"1%\"}} >\r\n                    {    \r\n                           <ListItems tasklist={selector[keys]} filter={removeTask} setCompleted={setCompleted}/>\r\n                    } \r\n                </div>\r\n                </div>\r\n                \r\n                \r\n                \r\n     \r\n</div>\r\n    \r\n    ) \r\n    \r\n}\r\nexport default App","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasklistSliceReducer from \"./CreateSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasklist: tasklistSliceReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport reactDom from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nreactDom.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}